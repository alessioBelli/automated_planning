(define (problem problem_3) (:domain emergency_services_logistics)
    (:objects 
        depot - depot
        loc1 loc2 loc3 - loc
        Alberto Alessio Stefano Alice - person
        r1 - robot
        b1 b2 b3 b4 - box
        c1 - carrier
        banana apple cookie - food
        tablet hammer - tools
        capacity_0 capacity_1 capacity_2 capacity_3 capacity_4 - capacity_number
    )

    (:htn
        :parameters ()
        :subtasks (and
            (task0 (deliver banana Alberto))
            (task1 (deliver apple Alessio))
            (task2 (deliver hammer Stefano))
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
        )
    )

    (:init
        ;set carrier capacity to 4
        (capacity c1 capacity_4)
        (capacity_succ capacity_1 capacity_0)
        (capacity_succ capacity_2 capacity_1)
        (capacity_succ capacity_3 capacity_2)
        (capacity_succ capacity_4 capacity_3)

        ;boxes location
        (at_loc b1 depot)(at_loc b2 depot)(at_loc b3 depot)(at_loc b4 depot)
        ;all boxes are empty
        (empty b1)(empty b2)(empty b3)(empty b4)
        ;all boxes are not loaded on a carrier
        (free b1)(free b2)(free b3)(free b4)

        ;robot location
        (at_loc r1 depot)

        ;carrier location
        (at_loc c1 depot)

        ;content location
        (at_loc banana depot)(at_loc apple depot)(at_loc hammer depot)(at_loc tablet depot)(at_loc cookie depot)

        ;people location
        (at_loc Alberto loc1)(at_loc Alessio loc1)(at_loc Stefano loc2)(at_loc Alice loc3)
    )
)